/*
Here is a super condensed overview of the core concepts:

-----

### What is JavaScript?

1.  **The Language of the Web:** JS is a programming language that makes websites **interactive**. HTML defines the *structure* (the nouns), CSS defines the *style* (the look), and JavaScript defines the *behavior* (the verbs).
2.  **Versatile:** It started in the browser, but it can also be used for back-end servers (with Node.js), mobile apps, and more.

### 1\. Variables (Storing Data)

Variables are like labeled boxes that hold a piece of information.

| Concept | Example Code | Explanation |
| :--- | :--- | :--- |
| **Declaration** | `let name = "Alice";` | `let` is the modern way to declare a variable. |
| **Constants** | `const PI = 3.14159;` | `const` is for variables whose value should *never* change. |
| **Output** | `console.log(name);` | The basic way to print something (for debugging or testing) to the developer console. |

### 2\. Data Types (The Information)

The basic kinds of information a variable can hold.

| Type | Example | Description |
| :--- | :--- | :--- |
| **String** | `"Hello World"` | Text, enclosed in quotes. |
| **Number** | `10`, `3.14` | Any number (integers and decimals are the same type). |
| **Boolean** | `true`, `false` | A value that is either true or false. |
| **Null** | `null` | Intentionally represents "no value" or "empty." |
| **Undefined** | `undefined` | The variable has been declared but has not been assigned a value. |

### 3\. Operators (Doing Math and Comparisons)

| Operator | Name | Example |
| :--- | :--- | :--- |
| `+`, `-`, `*`, `/` | Arithmetic | `5 + 2` (Result: 7) |
| `==` | Loose Equality | Checks if values are equal (e.g., `'5' == 5` is **true**) |
| `===` | Strict Equality | Checks if values **and** types are equal (e.g., `'5' === 5` is **false**) |
| `!=`, `!==` | Inequality | Checks if not equal. |
| `&&`, `||` | Logical AND, OR | Used to combine boolean conditions. |

### 4\. Control Flow (Making Decisions)

This is how your code makes choices based on conditions.

```javascript
let age = 18;

if (age >= 18) {
  console.log("You can vote.");
} else if (age < 18 && age > 0) {
  console.log("You cannot vote yet.");
} else {
  console.log("Invalid age.");
}
```

### 5\. Functions (Reusable Actions)

A function is a block of code designed to perform a particular task.

```javascript
// 1. Define the function
function greet(name) {
  return "Hello, " + name + "!"; // 'return' sends a result back
}

// 2. Call the function (make it run)
let message = greet("Charlie");
console.log(message); // Output: Hello, Charlie!
```

### 6\. Arrays and Objects (Storing Collections)

These are used to hold multiple pieces of related data.

| Type | Example Code | Description |
| :--- | :--- | :--- |
| **Array** | `let colors = ["red", "green", "blue"];` | An ordered list of items, accessed by number (index starts at 0). `colors[0]` is `"red"`. |
| **Object** | `let user = {name: "Ben", age: 30, city: "NY"};` | A collection of related data in a **key: value** pair format. Accessed with dot notation: `user.name` is `"Ben"`. |

-----

### Key Takeaway

The most important basic concept is that **JavaScript reads and executes your code line by line, allowing you to store data (variables) and perform actions (functions) based on conditions (control flow).**
*/